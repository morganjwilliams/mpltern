import numpy as np

import pytest
import matplotlib.pyplot as plt
from matplotlib.transforms import IdentityTransform
from taxes.ternary_axis import TernaryAxis


expected = [
    ["tick1",   0, -60, "bottom"],
    ["tick1",   5, -55, "bottom"],
    ["tick1",  10, -50, "bottom"],
    ["tick1",  15, -45, "bottom"],
    ["tick1",  20, -40, "bottom"],
    ["tick1",  25, -35, "bottom"],
    ["tick1",  30, -30, "bottom"],
    ["tick1",  35, -25, "bottom"],
    ["tick1",  40, -20, "bottom"],
    ["tick1",  45, -15, "bottom"],
    ["tick1",  50, -10, "bottom"],
    ["tick1",  55,  -5, "bottom"],
    ["tick1",  60,   0, "bottom"],
    ["tick1",  65,   5, "bottom"],
    ["tick1",  70,  10, "bottom"],
    ["tick1",  75,  15, "bottom"],
    ["tick1",  80,  20, "bottom"],
    ["tick1",  85,  25, "bottom"],
    ["tick1",  90,  30, "bottom"],
    ["tick1",  95,  35, "bottom"],
    ["tick1", 100,  40, "bottom"],
    ["tick1", 105,  45, "bottom"],
    ["tick1", 110,  50, "bottom"],
    ["tick1", 115,  55, "bottom"],
    ["tick1", 120,  60, "bottom"],
    ["tick1", 125,  65, "bottom"],
    ["tick1", 130,  70, "bottom"],
    ["tick1", 135,  75, "bottom"],
    ["tick1", 140,  80, "bottom"],
    ["tick1", 145,  85, "bottom"],
    ["tick1", 150,  90, "bottom"],
    ["tick1", 155, -85, "top"],
    ["tick1", 160, -80, "top"],
    ["tick1", 165, -75, "top"],
    ["tick1", 170, -70, "top"],
    ["tick1", 175, -65, "top"],
    ["tick1", 180, -60, "top"],
    ["tick1", 185, -55, "top"],
    ["tick1", 190, -50, "top"],
    ["tick1", 195, -45, "top"],
    ["tick1", 200, -40, "top"],
    ["tick1", 205, -35, "top"],
    ["tick1", 210, -30, "top"],
    ["tick1", 215, -25, "top"],
    ["tick1", 220, -20, "top"],
    ["tick1", 225, -15, "top"],
    ["tick1", 230, -10, "top"],
    ["tick1", 235,  -5, "top"],
    ["tick1", 240,   0, "top"],
    ["tick1", 245,   5, "top"],
    ["tick1", 250,  10, "top"],
    ["tick1", 255,  15, "top"],
    ["tick1", 260,  20, "top"],
    ["tick1", 265,  25, "top"],
    ["tick1", 270,  30, "top"],
    ["tick1", 275,  35, "top"],
    ["tick1", 280,  40, "top"],
    ["tick1", 285,  45, "top"],
    ["tick1", 290,  50, "top"],
    ["tick1", 295,  55, "top"],
    ["tick1", 300,  60, "top"],
    ["tick1", 305,  65, "top"],
    ["tick1", 310,  70, "top"],
    ["tick1", 315,  75, "top"],
    ["tick1", 320,  80, "top"],
    ["tick1", 325,  85, "top"],
    ["tick1", 330, -90, "bottom"],
    ["tick1", 335, -85, "bottom"],
    ["tick1", 340, -80, "bottom"],
    ["tick1", 345, -75, "bottom"],
    ["tick1", 350, -70, "bottom"],
    ["tick1", 355, -65, "bottom"],
    ["tick2",   0,  60, "bottom"],
    ["tick2",   5,  65, "bottom"],
    ["tick2",  10,  70, "bottom"],
    ["tick2",  15,  75, "bottom"],
    ["tick2",  20,  80, "bottom"],
    ["tick2",  25,  85, "bottom"],
    ["tick2",  30,  90, "bottom"],
    ["tick2",  35, -85, "top"],
    ["tick2",  40, -80, "top"],
    ["tick2",  45, -75, "top"],
    ["tick2",  50, -70, "top"],
    ["tick2",  55, -65, "top"],
    ["tick2",  60, -60, "top"],
    ["tick2",  65, -55, "top"],
    ["tick2",  70, -50, "top"],
    ["tick2",  75, -45, "top"],
    ["tick2",  80, -40, "top"],
    ["tick2",  85, -35, "top"],
    ["tick2",  90, -30, "top"],
    ["tick2",  95, -25, "top"],
    ["tick2", 100, -20, "top"],
    ["tick2", 105, -15, "top"],
    ["tick2", 110, -10, "top"],
    ["tick2", 115,  -5, "top"],
    ["tick2", 120,  -0, "top"],
    ["tick2", 125,   5, "top"],
    ["tick2", 130,  10, "top"],
    ["tick2", 135,  15, "top"],
    ["tick2", 140,  20, "top"],
    ["tick2", 145,  25, "top"],
    ["tick2", 150,  30, "top"],
    ["tick2", 155,  35, "top"],
    ["tick2", 160,  40, "top"],
    ["tick2", 165,  45, "top"],
    ["tick2", 170,  50, "top"],
    ["tick2", 175,  55, "top"],
    ["tick2", 180,  60, "top"],
    ["tick2", 185,  65, "top"],
    ["tick2", 190,  70, "top"],
    ["tick2", 195,  75, "top"],
    ["tick2", 200,  80, "top"],
    ["tick2", 205,  85, "top"],
    ["tick2", 210, -90, "bottom"],
    ["tick2", 215, -85, "bottom"],
    ["tick2", 220, -80, "bottom"],
    ["tick2", 225, -75, "bottom"],
    ["tick2", 230, -70, "bottom"],
    ["tick2", 235, -65, "bottom"],
    ["tick2", 240, -60, "bottom"],
    ["tick2", 245, -55, "bottom"],
    ["tick2", 250, -50, "bottom"],
    ["tick2", 255, -45, "bottom"],
    ["tick2", 260, -40, "bottom"],
    ["tick2", 265, -35, "bottom"],
    ["tick2", 270, -30, "bottom"],
    ["tick2", 275, -25, "bottom"],
    ["tick2", 280, -20, "bottom"],
    ["tick2", 285, -15, "bottom"],
    ["tick2", 290, -10, "bottom"],
    ["tick2", 295,  -5, "bottom"],
    ["tick2", 300,   0, "bottom"],
    ["tick2", 305,   5, "bottom"],
    ["tick2", 310,  10, "bottom"],
    ["tick2", 315,  15, "bottom"],
    ["tick2", 320,  20, "bottom"],
    ["tick2", 325,  25, "bottom"],
    ["tick2", 330,  30, "bottom"],
    ["tick2", 335,  35, "bottom"],
    ["tick2", 340,  40, "bottom"],
    ["tick2", 345,  45, "bottom"],
    ["tick2", 350,  50, "bottom"],
    ["tick2", 355,  55, "bottom"],
    ["corner",   0,   0, "bottom"],
    ["corner",   5,   5, "bottom"],
    ["corner",  10,  10, "bottom"],
    ["corner",  15,  15, "bottom"],
    ["corner",  20,  20, "bottom"],
    ["corner",  25,  25, "bottom"],
    ["corner",  30,  30, "bottom"],
    ["corner",  35,  35, "bottom"],
    ["corner",  40,  40, "bottom"],
    ["corner",  45,  45, "bottom"],
    ["corner",  50,  50, "bottom"],
    ["corner",  55,  55, "bottom"],
    ["corner",  60,  60, "bottom"],
    ["corner",  65,  65, "bottom"],
    ["corner",  70,  70, "bottom"],
    ["corner",  75,  75, "bottom"],
    ["corner",  80,  80, "bottom"],
    ["corner",  85,  85, "bottom"],
    ["corner",  90,  90, "bottom"],
    ["corner",  95, -85, "top"],
    ["corner", 100, -80, "top"],
    ["corner", 105, -75, "top"],
    ["corner", 110, -70, "top"],
    ["corner", 115, -65, "top"],
    ["corner", 120, -60, "top"],
    ["corner", 125, -55, "top"],
    ["corner", 130, -50, "top"],
    ["corner", 135, -45, "top"],
    ["corner", 140, -40, "top"],
    ["corner", 145, -35, "top"],
    ["corner", 150, -30, "top"],
    ["corner", 155, -25, "top"],
    ["corner", 160, -20, "top"],
    ["corner", 165, -15, "top"],
    ["corner", 170, -10, "top"],
    ["corner", 175,  -5, "top"],
    ["corner", 180,   0, "top"],
    ["corner", 185,   5, "top"],
    ["corner", 190,  10, "top"],
    ["corner", 195,  15, "top"],
    ["corner", 200,  20, "top"],
    ["corner", 205,  25, "top"],
    ["corner", 210,  30, "top"],
    ["corner", 215,  35, "top"],
    ["corner", 220,  40, "top"],
    ["corner", 225,  45, "top"],
    ["corner", 230,  50, "top"],
    ["corner", 235,  55, "top"],
    ["corner", 240,  60, "top"],
    ["corner", 245,  65, "top"],
    ["corner", 250,  70, "top"],
    ["corner", 255,  75, "top"],
    ["corner", 260,  80, "top"],
    ["corner", 265,  85, "top"],
    ["corner", 270, -90, "bottom"],
    ["corner", 275, -85, "bottom"],
    ["corner", 280, -80, "bottom"],
    ["corner", 285, -75, "bottom"],
    ["corner", 290, -70, "bottom"],
    ["corner", 295, -65, "bottom"],
    ["corner", 300, -60, "bottom"],
    ["corner", 305, -55, "bottom"],
    ["corner", 310, -50, "bottom"],
    ["corner", 315, -45, "bottom"],
    ["corner", 320, -40, "bottom"],
    ["corner", 325, -35, "bottom"],
    ["corner", 330, -30, "bottom"],
    ["corner", 335, -25, "bottom"],
    ["corner", 340, -20, "bottom"],
    ["corner", 345, -15, "bottom"],
    ["corner", 350, -10, "bottom"],
    ["corner", 355,  -5, "bottom"],
]


class DummyAxes:
    corners = None
    _labelrotation = None


class DummyTernaryAxis:
    axis_name = 't'
    axes = DummyAxes


def _create_axis(rotation):
    from scipy.special import cosdg, sindg
    corners = np.array([
        (0.5, 1.0),
        (0.5 - 1.0 / np.sqrt(3.0), 0.0),
        (0.5 + 1.0 / np.sqrt(3.0), 0.0),
    ])
    rotation_matrix = ([
        [cosdg(rotation), -sindg(rotation)],
        [sindg(rotation),  cosdg(rotation)],
    ])
    self = DummyTernaryAxis()
    self.axes.corners = np.dot(rotation_matrix, corners.T).T
    self.axes.transAxes = IdentityTransform()
    return self


@pytest.mark.parametrize('label_position,rotation,label_rotation_ref,va_ref',
                         expected)
def test_get_label_position(label_position, rotation, label_rotation_ref,
                            va_ref):
    self = _create_axis(rotation)
    self.label_position = label_position
    label_rotation, va = TernaryAxis._get_label_rotation(self)
    assert np.isclose(label_rotation, label_rotation_ref) and va == va_ref


def _create_references():
    for position in ['bottom', 'top', 'corner']:
        for rotation in range(0, 360, 5):
            self = _create_axis(rotation)
            self.label_position = position
            label_rotation, va = TernaryAxis._get_label_rotation(self)
            print('    [{:s}, {:3.0f}, {:3.0f}, {:s}],'.format(
                '"' + position + '"', rotation, label_rotation,
                '"' + va + '"'))

if __name__ == '__main__':
    _create_references()
