.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_gallery_advanced_05.inset.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_advanced_05.inset.py:


=====
Inset
=====
You can have an inset by adding another `TernaryAxes`.



.. image:: /gallery/advanced/images/sphx_glr_05.inset_001.svg
    :class: sphx-glr-single-img





.. code-block:: default

    import matplotlib.pyplot as plt
    from mpltern.ternary.datasets import get_scatter_points


    t0, l0, r0 = get_scatter_points(seed=19)
    t1, l1, r1 = get_scatter_points(seed=68)

    fig = plt.figure()
    fig.subplots_adjust(left=-0.1)

    ax = fig.add_subplot(projection='ternary')

    ax.scatter(t0, l0, r0, alpha=0.5)
    ax.scatter(t1, l1, r1, alpha=0.5)

    # Plot the triangle region for the inset.
    ax.fill([0.4, 0.3, 0.3], [0.3, 0.4, 0.3], [0.3, 0.3, 0.4], fc='none', ec='k')

    # Create a new `TernaryAxes` for the inset with specifying a rectangle in the
    # figure coordinates.
    axins = fig.add_axes([0.625, 0.525, 0.30, 0.30], projection='ternary')

    # Limit the ploting range to be consistent with the above plotted triangle.
    axins.set_ternary_min(0.3, 0.3, 0.3)

    axins.scatter(t0, l0, r0, alpha=0.5)
    axins.scatter(t1, l1, r1, alpha=0.5)

    plt.show()


.. _sphx_glr_download_gallery_advanced_05.inset.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: 05.inset.py <05.inset.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: 05.inset.ipynb <05.inset.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
